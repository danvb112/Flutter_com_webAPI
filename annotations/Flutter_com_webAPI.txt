Flutter com web API

-  teremos acesso a um novo pacote, o http, assim como tivemos acesso ao SKFlight.
Esse pacote é responsável por fazer as configurações necessárias para, por exem-
plo, fazermos a integração com uma Web API utilizando o protocolo HTTP (assim 
como fizemos no Postman).

- Para isso seguiremos o mesmo procedimento que fizemos com o skflite, começando
pela adição da dependência. No arquivo pubspec.yaml, incluiremos o http: e cli-
caremos em "Packages get" para realizar o download e a configuração do projeto.

- Criaremos um diretório específico para realizarmos a comunicação. Na criação 
do diretório, que será localizado na pasta "lib" do projeto, não é necessário 
seguir um padrão exato. Utilizaremos o nome "http" para indicar que todo o códi-
go dentro desse pacote está destinado à comunicação externa via HTTP, mas você 
pode utilizar outro nome de sua preferência. O arquivo segue essa mesma lógica,
e nesse caso usaremos o nome webclient.dart, muito comum em diversas aplicações 
e que se refere justamente a um cliente responsável pela Web Para testarmos a 
nossa integração, faremos a busca das transações, da mesma forma que fizemos no 
Postman. Para isso, criaremos um método chamado findAll().

- No corpo do método precisaremos acessar o código do http. Esse pacote nos for-
nece algumas funções estáticas que podem ser utilizadas, como a função get(), 
que trabalha com o verbo GET do HTTP. Além disso, a função get() exige o uso de 
uma url representando o endereço que será acessado, e que deve ser passado via 
string

- Quando fazemos uma requisição GET, precisamos pegar o conteúdo da resposta, 
que é justamente o Future<Response>, uma entidade do HTTP para nos devolver uma 
resposta. Para isso, ou fazemos o then, como já vimos anteriormente, ou traba-
lhamos com async/await. Usaremos a segunda opção, pois é a maneira mais comum e 
sucinta de trabalhar.

- Dado que temos a response, podemos fazer uma impressão para verificarmos se 
estamos conseguindo o conteúdo esperado antes de nos comprometermos demais com 
o nosso código. Faremos então um print(response). Executando dessa maneira, o 
retorno muito provavelmente será na forma de um toString, que não é exatamente 
o conteúdo que desejamos. Sendo assim, passaremos o response.body para consegui-
rmos o corpo da requisição, onde está a lista de transações que nos interessa.

- Vemos que ocorreu uma exceção informando que a conexão foi recusada e o conteú-
do do endereço passado não pôde ser acessado. Isso aconteceu pois, no findAll(),
estamos tentando acessar o localhost, que representa a própria máquina que está 
executando a aplicação. Porém, a máquina que executa o aplicativo que criamos, o
Bytebank, é o dispositivo celular, e não o computador geral. Esse é um detalhe 
muito importante quando trabalhamos com comunicação externa, principalmente 
quando o servidor (a Web API) está no nosso computador.

- Dado que temos essa peculiaridade, como faremos para acessar nosso servidor? 
Existem algumas técnicas para isso. Dentre elas, considerando que tanto o compu-
tador quanto o emulador estão na mesma rede, podemos pegar o endereço IP dessa 
rede, algo que podemos conseguir por meio do Prompt de Comando.

- Voltaremos ao arquivo webclient.dart e substituiremos a URL com o endereço IP 
da rede

- Quando fazemos uma implementação que envolve comunicação externa, no caso HTTP
esse tipo de feedback faz toda a diferença para entendermos se o caminho que es-
tamos trilhando nessa comunicação faz sentido com o fluxo esperado.

- Dada essa necessidade, aprenderemos uma técnica que permite um feedback que 
nos traga informações mais precisas em relação a essa comunicação. Para isso, 
usaremos um componente que atua como interceptador do HTTP, ou seja, basicamente
 um componente que fica atento a qualquer requisição ou resposta que ocorre a 
partir desse protocolo. Dessa forma, se mandarmos uma requisição para a Web API 
ou se recebermos uma resposta dessa requisição, o interceptador saberá, e assim 
poderemos trabalhar em cima dessa interceptação.

- Nosso objetivo, no momento, é guardarmos essas informações para descobrirmos 
qual foi o endereço da requisição, o conteúdo e os headers enviados, entre ou-
tros detalhes. Quando tivermos uma resposta, além de guardar esse tipo de forma-
ção, também queremos obter o status code (por exemplo o 200 do HTTP, que indica 
que tudo ocorreu corretamente, ou o 500), e assim por diante.

- Incluiremos a linha http_interceptor: no arquivo pubspec.yaml e clicaremos em 
"Packages get" para instalarmos e configurarmos no projeto o novo pacote.

- Dentre essas "implementações comuns", temos o próprio logging, ou seja, a 
responsabilidade de guardar as informações do que aconteceu durante a comunica-
ção HTTP. Encontraremos, inclusive, um código pronto para isso

- Vamos copiar esse código e incluí-lo, por enquanto, no nosso webclient.dart, 
fazendo as importações necessárias. Repare que, para utilizarmos a classe 
LoggingInterceptor, é necessário implementar a interface InterceptorContract do 
Dart. Se você quiser utilizar outro interceptador de sua preferência, também 
terá que implementar essa interface.

- Nos é exigida a implementação (ou a sobrescrita) de dois métodos, 
interceptRequest() e interceptResponse(). Todo tipo de requisição chamará o 
método interceptRequest() que, a princípio, está imprimindo o RequestData, ou 
seja, os dados que vêm da requisição. Já o interceptResponse é executado sempre 
que recebemos uma resposta, imprimindo o ResponseData.

- Agora que já declaramos o interceptador no nosso código, precisamos utilizá-lo
propriamente. A documentação do http_interceptor mostra um exemplo de como fazer
isso a partir de um Client, mas também podemos fazê-lo manualmente. Voltaremos 
então ao nosso código e, antes de chamarmos o get(), criaremos uma entidade Client que também terá acesso a esse método.

- Criaremos esse cliente a partir de uma referência HttpClientWithInterceptor. 
Nela, teremos o método de construção build(), com o qual é possível adicionar 
interceptadores (interceptors) em uma lista. Na documentação, a lista é adicio-
nada via colchetes (ao invés de ser criada uma lista anterior), e faremos o 
mesmo no nosso código. Na lista, incluiremos as instâncias dos interceptadores 
que queremos adicionar - nesse caso, somente o LoggingInterceptor.

- Com isso teremos um cliente para ser utilizado com o nosso interceptador. Para
utilizá-lo, atribuiremos o retorno a um objeto client (do tipo Client) e, ao 
invés de chamarmos apenas o método get(), o chamaremos a partir desse objeto 
com client.get().

- Se quisermos saber, por exemplo, o endereço que foi usado para a requisição, 
podemos pedir data.url. Se quisermos os headers enviados na requisição, podemos
adicionar um novo print() pedindo a informação data.headers. Da mesma forma, se 
quisermos o corpo da requisição, podemos pedir data.body, e assim por diante. 
Para que nosso retorno fique mais claro, faz todo sentido utilizarmos um 
template string para identificar o que cada impressão significa.

- A ideia é convertermos esse conteúdo no formato JSON para um objeto que faça 
mais sentido para nós, que seria uma lista de transferências.

- O response.body, que utilizamos anteriormente para obter o conteúdo da resposta,
trata-se justamente de uma referência de string. Sendo assim, a princípio, não 
conseguiremos mandar esse conteúdo como uma lista de transferências, sendo 
necessário fazermos uma conversão. É justamente isso que iremos aprender.

- Para fazer essa conversão, primeiro precisaremos pegar o objeto JSON e convertê-
lo para um objeto do Dart. O Dart nos disponibiliza um pacote de conversão 
(dart:convert) que nos possibilita tanto passar uma string em JSON para um obje-
to Dart (jsonDecode()) quanto para passar um objeto Dart para uma string JSON 
(jsonEncode()).

- O Visibility() é um componente que permite configurar se outro widget será 
visível ou não. Assim, o Icon(), por exemplo, será uma espécie de widget opcio-
nal.

- A ideia agora é tentarmos acessar um serviço indisponível, o que pode ser 
feito utilizando um endereço IP inválido. Ao entrarmos em "Transaction Feed", a 
tela de "Loading" será exibida infinitamente. Isso acontece pois a forma que 
fazemos essa operação assíncrona, que é a partir do future, não tem uma regra de
timeout, ou seja, de "tempo excedido", algo muito comum em operações do tipo.

- Porém, precisamos ficar atentos a esse cenário, pois o aplicativo não pode 
ficar carregando e consumindo dados e processamento do usuário por um período 
indeterminado.

- Para solucionarmos esse problema, adicionaremos um timeout() após a execução 
do client.get() e estabeleceremos uma duração de 5 segundos (Duration(seconds: 5)). 
Diferentes bibliotecas utilizam períodos de tempo, como 3, 5 ou 15 segundos.

- usaremos client.post() para obtermos o feedback necessário. Agora podemos adi-
cionar as informações ao POST. A primeira informação, que é obrigatória, é o en-
dereço da requisição. Dado que esse endereço será o mesmo da requisição GET, po-
demos extraí-lo para uma constante baseUrl do tipo String e utilizá-la nos pon-
tos referenciados.

- Perceba que temos os headers, que são justamente os cabeçalhos que tivemos que
mandar no Postman, seja o content-type de JSON ou o password, que é a senha para
realizar a transação. Além disso, temos o body, que é o conteúdo que precisa-
remos mandar na transferência.

- Para enviarmos os headers, teremos que passar um mapa no qual tanto as chaves 
quanto os valores serão strings. Uma maneira fácil e objetiva de declararmos 
esse mapa é por meio das chaves ({}). Assim, não precisaremos declarar o nome 
Map.

- Computaremos os valores adicionando primeiro a chave, por exemplo 
'Content-type', seguida do seu valor, nesse caso 'application/json'.

- Passados os cabeçalhos, adicionaremos também o body contendo os valores da 
transação. Esse atributo espera valores do tipo dynamic, mas precisaremos tomar
cuidado nesse ponto.

- Isso porque podemos, por exemplo, enviar uma transaction. Porém, a requisição 
de POST espera uma estrutura de JSON, o que irá requerer um conversor - da mesma
maneira que pegamos um valor mapeado do servidor e usamos um conversor para 
transformá-lo em um objeto em Dart.

- Sendo assim, antes de enviarmos a transaction, usaremos o jsonEncode() para 
realizarmos essa conversão.

- Entretanto, antes da conversão, precisaremos transformar a transação em um 
objeto genérico (um mapa com chave do tipo String e valor dinâmico), da mesma 
maneira como utilizamos as informações do banco de dados. Na criação desse 
objeto, podemos declarar uma referência de Map ou simplesmente usar a mesma 
estrutura aplicada nos headers, que é bem mais objetiva.

- No corpo, mandaremos o value recebendo transaction.value e, em seguida, a 
estrutura do nosso contact. Como esse é um objeto dentro do JSON, abriremos uma 
nova estrutura de chaves ({}) na qual incluiremos as chaves name e accountNumber
 e seus respectivos valores transaction.contact.name e 
transaction.contact.accountNumber.

- Enviaremos esse transactionMap para o jsonEncode() que, por sua vez, devolverá
uma string representando o JSON esperado no body. Chamaremos essa string de 
transactionJson e finalmente a passaremos no body do nosso post().

- Perceba que tais conversores, tanto para lista, transferência, mapa ou JSON, 
possuem uma certa complexidade, mesmo tratando de objetos bastante simples. Além
disso, é cada vez mais comuns fazermos esse tipo de conversão em objetos mais 
complicados. Se mantivermos o código dessa forma, teremos uma experiência ruim 
no desenvolvimento do projeto e dificultaremos a sua manutenção.

- Aproveitaremos esse momento para conhecermos outra técnica relacionada ao 
conversor do Dart. Para isso, teremos como auxílio a própria documentação do 
Flutter, mais especificamente a página JSON and serialization.

- Esse documento bastante extenso trata da serialização de um objeto JSON, algo 
muito comum quando fazemos comunicações externas por meio de uma Web API. Isso 
é importante pois existem diferentes maneiras de lidar com JSON a depender do 
ambiente, como Android ou iOS, seja utilizando uma biblioteca ou escrevendo o 
código manualmente.

- Logo de cara é mostrado o processo que utilizamos na primeira implementação, 
ou seja, utilizando o jsonDecode() para converter um mapa. Em seguida são 
citados alguns possíveis problemas, como o fato dessa implementação ser 
propensa a erros, por exemplo se não inicializarmos todos os valores de um 
objeto ou se digitarmos algum valor ou referência incorretamente.

- Dado que tais erros são muito comuns, existe outra abordagem, que é fazer a 
conversão dentro do próprio objeto. Isso nos fornece alguns recursos auxiliares,
como o próprio compilador ajudando a preencher todos os atributos. Dessa maneira, 
as chances de erro são bem menores.

- Para usarmos tal abordagem teremos que implementar dois comportamentos nos 
nossos modelos: o fromJson(), que pega um json via parâmetro e o converte para 
um objeto; e o toJson(), que pega o objeto e devolve um mapa.

- No IntelliJ, acessaremos a classe Transaction para começarmos a implementação 
da lógica que converte um JSON para nossa transação. Incluiremos nela um 
Transaction.fromJson() indicando que o valor recebido será um Map<String, 
dynamic>.

- Para criarmos uma transferência a partir desse método, precisamos incluir os 
dois pontos (:) e inicializar cada um dos atributos. Nessa abordagem, somos 
obrigados a colocar todos os atributos durante a inicialização - nesse caso 
value, recebido de json['value'], e contact, recebido de json['contact'].

- O problema dessa construção é que estamos colocando um objeto do Dart como se 
fosse um mapa de String e valor dinâmico. Nesse tipo de abordagem, podemos 
criar um novo conversor a partir do novo objeto. Nesse caso, utilizaremos o
fromJson no nosso contato (Contact).

- Adicionaremos os dois pontos (:) e, no corpo do método, preencheremos os 
campos esperados: id, vindo de json['id'], name, de json['name'] e 
accountNumber, de json['accountNumber']. Note que, a princípio, estamos 
utilizando o valor json['id']. Dessa forma, o id será preenchido com um valor 
nulo e poderá, futuramente, ser sobrescrito. Da mesma forma, se você preferir, 
pode atribuir o valor 0 a esse ID.

- Para exibir um Dialog no flutter é preciso chamar uma função que apresente esse
componente sendo esta a 'showDialog()' que receberá um contexto e um builder, 
que seria o responsável para apresentar a informação. No builder, teremos uma 
funçãio que recebe um BuildContext e retorna um widget e é justamente este retor-
no que deveremos apresentar o Dialog.

- Para coletarmos a senha no dialog, lançaremos mão da mesma técnica utilizada 
nos featuredItem, isto é, usaremos um callback indicando que algo foi clicado. 
Ainda em TransactionAuthDialog, criaremos uma função chamada onConfirm. Dado que
iremos enviar uma informação, modificaremos o tipo dessa Function para que ela 
receba como valor uma String. Em seguida, receberemos essa função pelo 
construtor TransactionAuthDialog(). Precisaremos de um controlador de modo a 
recuperarmos a informação no campo de texto, algo que só será possível com um
StatefulWidget.

- Percebemos que alguns problemas podem acontecer no envio de transferências 
para a Web API, como a senha estar incorreta ou o valor da transferência ser 
inadequado. Cada um desses problemas exige um cuidado especial para que o 
usuário tenha informações precisas e saiba como proceder. Considerando essa 
necessidade, entenderemos como é possível identificar a ocorrência desses erros 
e como atuar sobre eles.

- Sabemos que o envio das informações para a Web API é feita por meio do save(),
e é a partir desse momento que precisaremos, de alguma maneira, identificar os 
problemas. Por nossa sorte, o Dart nos disponibiliza um método que faz a 
captura desses erros. Atualmente utilizamos o then para obter a resposta do 
Future, mas também é possível, depois disso, executar outros comportamentos do 
Future.

- Como nosso objetivo é capturar erros, utilizaremos o método catchError(), que 
a principio espera como argumento obrigatório a implementação de uma função 
onError.

- Para conseguirmos atuar no catchError() precisaremos ter a capacidade de 
enviar um erro específico e trabalhar com ele. Existem diversas maneiras de se 
lidar com erros, portanto não é interessante lidar com eles de maneira genérica.
Neste caso, é interessante considerarmos as exceptions que são lançadas na 
execução do Future e que podem ser capturadas pelo catchError().

- Ao lidarmos com o catchError(), podemos recebemos qualquer tipo de informação 
(e) - nesse caso um dynamic, mas poderia ser uma exception, uma string ou outro 
tipo. Sendo assim, essa implementação não garante qual é o tipo recebido. 
Entretanto, o FailureDialog() espera uma string, e nós enviamos uma _Exception, 
que é a implementação padrão da Exception. Essa implementação possui alguns 
conteúdos, como o message, que é justamente a mensagem que nos é apresentada. 
Como esse é um valor dinâmico, conseguiremos acessá-lo com e.message.

- Da mesma forma, se colocarmos um valor mas errarmos a senha, a mensagem 
"authentication failed" aparecerá na tela. Ainda assim, não temos garantia de
que tudo vai operar da maneira esperada. A forma que implementamos não nos 
garante nenhuma segurança dos tipos que recebemos no catchError(), inclusive uma
Transaction. Ainda que esse cenário seja impraticável no dia-a-dia, vamos 
simulá-lo lançando uma Transaction na execução do save().

- Ao tentarmos enviar uma transferência pelo aplicativo, receberemos um erro 
informando que a classe Transaction não possui o atributo message. Voltando ao
TransctionForm, no momento em que utilizamos o catchError(), teremos acesso a 
uma propriedade: test, que será o responsável por fazer uma comparação booleana
e verificar se o tipo que recebemos condiz com o esperado. Para isso, 
implementaremos uma função enviando como parâmetro o valor e recebido, que a 
princípio é um dynamic, e devolvendo uma expressão booleana e is Exception. 
Dessa vez não teremos nenhuma mensagem de erro na tela, pois o catchError() só 
será executado quando identificar que e realmente se trata de uma Exception. 
Assim, não acessaremos uma propriedade que não existe naquela referência.

- 








